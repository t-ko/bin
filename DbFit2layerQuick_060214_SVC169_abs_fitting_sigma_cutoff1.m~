clear sigma DbFit_2layer fval_2layer exitflag_2layer Curvefit2layeravg ind2layertmp errorfit2layeravg meanerror2layeravg stderror2layeravg g1avg g1tmp;
x0=[1e-8 setbeta];%Initial guess for Db and beta
cutoff = 1;
%Now fit each frame of data, averaging across all detectors

for measnum=0:numframestoavg:size(intensitydata,1)-numframestoavg
    intensityavg(measnum+1)=nanmean(nanmean(intensitydata(measnum+1:measnum+numframestoavg,usedflowdets(1):usedflowdets(2)),2),1);
    corrsavg(measnum+1,:)=nanmean(nanmean(corrs(measnum+1:measnum+numframestoavg,:,usedflowdets(1):usedflowdets(2)),3),1);
    ind = false;
    if isempty(find(isnan(corrsavg(measnum+1,:)))) & ~isnan(mua(measnum+1))
        ind = true;
        foo=min(find(slidingavg(corrsavg(measnum+1,:),avgnum)<=cutoff));
        if isempty(foo) || foo<startcorr
            tmpf=datalength;
        else
            tmpf=min(find(slidingavg(corrsavg(measnum+1,:),avgnum)<=cutoff));
        end
        tmpf0(measnum+1) = tmpf;
    else
        tmpf0(measnum+1) = NaN;
    end
    measind(measnum+1) = ind;
end

tmpf = median(tmpf0(~isnan(tmpf0)));

for measnum=0:numframestoavg:size(intensitydata,1)-numframestoavg
    if isempty(find(isnan(corrsavg(measnum+1,:)))) & ~isnan(mua(measnum+1))
        corrstmpavg=squeeze(corrsavg(measnum+1,startcorr:tmpf));        
        corrstmpavg=slidingavg(corrstmpavg,avgnum);
        taustmp=taus(startcorr:tmpf);
        %Calculate noise from Chao's noise model
        sigma(measnum+1,:)=1./intensityavg(measnum+1).*sqrt(1./T./t).*sqrt(1+mean(setbeta).*exp(-gamma*taus));

        g2smooth = smooth(corrsavg(measnum+1,:), avgnum);
        Betasaveavg(measnum+1)=median(g2smooth(1:5))-1;
        %2-layer fit of g1
        zd=1./muspo;
        g1avg(:,measnum+1)=sqrt(abs((corrsavg(measnum+1,:)-1)./Betasaveavg(measnum+1)));
        g1tmp(:,measnum+1) = g1avg(startcorr:tmpf,measnum+1);  
        thickness = 0.5;   
        % From Dehaes, 2014 2-layer fitting of absolute optical
        % properties in adult head + modeling using spherical
        % representation of greens' function
        phi0 = fminsearchbnd(@(phi)(abs(phi/(sin(phi/2))- (DPF(3)*2/r))),[pi/2],[0],[2*pi],options);
        theta0 = fminsearchbnd(@(theta)(abs(DPF(3)/phi0*(cos(theta/2)-cos(phi0/2))-thickness)),[pi/2],[0],[pi],options);
        muaC_ratio = ((phi0-theta0)/phi0)^3;
        muspC_ratio = (phi0-theta0)/phi0;
        muaC_scalar = 2;
        muspC_scalar = 0.5;
        muaEC_scalar = (1-muaC_scalar*muaC_ratio)/(1-muaC_ratio);
        muspEC_scalar = (1-muspC_scalar*muspC_ratio)/(1-muspC_ratio);
        mua2layer(measnum+1,:) = mua(measnum+1).*[muaEC_scalar muaC_scalar];
        musp2layer = muspo.*[muspEC_scalar muspC_scalar];
% 

    end

end

for n = find(measind)
    n
    %Semi-inf fit of g2
    [Dbfitavg(n),fvalavg(n),exitflagavg(n)]=fminsearchbnd(@(x)xg2fitx_new1_withsigma(x,Betasaveavg(n),r,taustmp,muspo,mua(n),k0,ze,corrstmpavg,length(taustmp),sigma(n,startcorr:tmpf)'),x0(1),[0],[1e-2],options);
    

    x0_2layer = [Dbfitavg(n) Dbfitavg(n)];
%     for i = 1:length(diff(Curvefitavg(:,n)))-5
%         a = ((diff(Curvefitavg(:,n))));
%         fitdecayed(i) = median(a(i:i+5));
%     end
%     logt = find(smooth(fitdecayed,10) == min(smooth(fitdecayed,10)));
%     endt = (log(taus(logt))-log(taus(1)))*(theta0/phi0/(1-theta0/phi0))+(log(taus(logt)));
%     endtau = find(abs(log(taus)-endt)==min(abs(log(taus)-endt)));
    endtau = length(taustmp);

    [Dbfit_2layer(n,:),fval_2layer(n),exitflag_2layer(n)]=fminsearchbnd(@(x)xg2fit2layer_withsigma(x,Betasaveavg(n),n0,zd,mua2layer(n,:),musp2layer,lambda*10^7,thickness,r,taustmp(1:endtau),corrstmpavg,sigma(n,startcorr:tmpf)),x0_2layer,[0 0],[],options);
    figure(gcf);
    hold off
    semilogx(taus(1:size(g1avg,1)),g1avg(:,n))
    hold on; axis tight;
    semilogx(taus,Curvefitavg(:,n),'black')
    semilogx(taus,Curvefit2layeravg(:,n),'red')
    xlim([0 10^-3])
    ylim([0 1.1])
end

clear errorfitavg errorfit2layeravg
for measnum=1:(size(intensitydata,1))    
    if ~isempty(find(~isnan(g1tmp(:, measnum))))
        %Calculate error in fit
        Curvefitavg(:,measnum)=g1fitx(Dbfitavg(measnum),r,taus,muspo,mua(measnum),k0,ze);
        Curvefitg2avg(:,measnum)=g2fitx([Dbfitavg(measnum) Betasaveavg(measnum)],r,taus,muspo,mua(measnum),k0,ze);
        errorfitavg(:,measnum)=(g1tmp(:,measnum)-Curvefitavg(startcorr:tmpf,measnum)); 
        meanerroravg(measnum)=mean(norm(errorfitavg(:,measnum)));
        stderroravg(measnum)=std(errorfitavg(:,measnum));

        %Calculate error in fit
        Curvefit2layeravg(:,measnum)=g1fit2layer(Dbfit_2layer(n,end,:),n0,zd,mua2layer(measnum,:),musp2layer,lambda*10^7,thickness,r,taus);
        Curvefitg2avg(:,n)=(Curvefit2layeravg(:,n).*Betasaveavg(n)).^2 + 1;
        errorfit2layeravg(:,measnum)=(g1tmp(:,measnum)-Curvefit2layeravg(startcorr:tmpf,measnum));
        meanerror2layeravg(measnum)=mean(norm(errorfit2layeravg(:,measnum)));
        stderror2layeravg(measnum)=std(errorfit2layeravg(:,measnum));
    else
        errorfitavg(:,measnum)=ones(1,length(taus)).*NaN;
        meanerroravg(measnum)=NaN;
        stderroravg(measnum)=NaN;
        Betasaveavg(measnum)=NaN;
        Dbfitavg(measnum)=NaN;
        fvalavg(measnum)=NaN;
        exitflagavg(measnum)=NaN;
        g1avg(:,measnum)=ones(1,length(taus)).*NaN;
        Curvefitavg(:,measnum)=ones(1,length(taus)).*NaN;
        Curvefitg2avg(:,measnum)=ones(1,length(taus)).*NaN;
        errorfit2layeravg(:,measnum)=ones(1,length(taus)).*NaN;
        meanerror2layeravg(measnum)=NaN;
        stderror2layeravg(measnum)=NaN;
    end   
end