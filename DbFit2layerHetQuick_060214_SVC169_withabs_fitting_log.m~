clear DbFit_2layer fval_2layer exitflag_2layer Curvefit2layeravg ind2layertmp errorfit2layeravg meanerror2layeravg stderror2layeravg;

%Now fit each frame of data, NO frame averaging used (TK)

parfor measnum=((0:1:size(intensitydata,1)-numframestoavg))

    if fitavg==1
        %Since we take data from multiple SM flow fibers at the same
        %location, fits are more accurate if we take the mean of all these
        %curves
        
        intensityavg(measnum)=nanmean(nanmean(intensitydata(measnum:measnum+numframestoavg,usedflowdets(1):usedflowdets(2)),2),1);
        corrsavg(measnum,:)=nanmean(nanmean(corrs(measnum:measnum+numframestoavg,:,usedflowdets(1):usedflowdets(2)),3),1);
        
        if isempty(find(isnan(corrsavg(measnum,:)))) & ~isnan(mua(measnum))
            foo=min(find(slidingavg(corrsavg(measnum,:),avgnum)<=cutoff));
            if isempty(foo) || foo<startcorr
                tmpf=datalength;
            else
                tmpf=min(find(slidingavg(corrsavg(measnum,:),avgnum)<=cutoff));
            end
            corrstmpavg=squeeze(corrsavg(measnum,startcorr:tmpf));        
            corrstmpavg=slidingavg(corrstmpavg,avgnum);
            taustmp=taus(startcorr:tmpf);
            %Calculate noise from Chao's noise model
            sigma=1./intensityavg(measnum).*sqrt(1./T./t).*sqrt(1+mean(setbeta).*exp(-gamma*taus));

%             if fitbeta==0
%                 %Dont fit beta, bound Db fit to reasonable values
%                 Betasaveavg(measnum)=mean(setbeta);
%                 [Dbfitavg(measnum),fvalavg(measnum),exitflagavg(measnum)]=fminsearchbnd(@xg2fitx_new1_withsigma,x0(1),[0],[1e-2],options,...
%                     Betasaveavg(measnum),r,taustmp,muspo,mua(measnum),k0,ze,corrstmpavg,length(taustmp),sigma);
%             elseif fitbeta==2
%                 %Dont fit beta, bound Db fit to reasonable values
%                 Betasaveavg(measnum)=nanmean([1.5*corrsavg(measnum,1) corrsavg(measnum,2) 0.5*corrsavg(measnum,3)])-1;
%                 [Dbfitavg(measnum),fvalavg(measnum),exitflagavg(measnum)]=fminsearchbnd(@xg2fitx_new1_withsigma,x0(1),[0],[1e-2],options,...
%                     Betasaveavg(measnum),r,taustmp,muspo,mua(measnum),k0,ze,corrstmpavg,length(taustmp),sigma);
%             else
%                 %Fit both Beta and BFI at the same time, bound Beta fit to
%                 %reasonable values
%                 [betaDbfitavg(:,measnum),fvalavg(measnum),exitflagavg(measnum)]=fminsearchbnd(@xg2fitx_betaandDB_new1_withsigma,x0,...
%                     [0 betafitmin],[1e-1 betafitmax],options,r,taustmp,muspo,mua(measnum),k0,ze,corrstmpavg,length(taustmp),sigma);
%                 Betasaveavg(measnum)=squeeze(betaDbfitavg(2,measnum));
%                 Dbfitavg(measnum)=squeeze(betaDbfitavg(1,measnum));
%             end

            % Modified to NOT fit beta, set to average of first 5 pts of
            % all frames (TK)
            
            g2smooth = smooth(corrsavg(measnum,:), avgnum);
            Betasaveavg(measnum)=median(g2smooth(1:10))-1;
            
            %Semi-inf fit of g2
            [Dbfitavg(measnum),fvalavg(measnum),exitflagavg(measnum)]=fminsearchbnd(@xg2fitx_new1_log,x0(1),[0],[1e-2],options,...
                     Betasaveavg(measnum),r,taustmp,muspo,mua(measnum),k0,ze,corrstmpavg,length(taustmp),sigma);
            
            %2-layer fit of g1
            zd=1./muspo;
            g1avg(:,measnum)=sqrt(abs((corrsavg(measnum,:)-1)./Betasaveavg(measnum)));
            g1tmp(:,measnum) = g1avg(startcorr:tmpf,measnum);
            
            Curvefitavg(:,measnum)=g1fitx(Dbfitavg(measnum),r,taus,muspo,mua(measnum),k0,ze);
            Curvefitg2avg(:,measnum)=g2fitx([Dbfitavg(measnum) Betasaveavg(measnum)],r,taus,muspo,mua(measnum),k0,ze);
            % PLOT

            %Calculate error in fit
            indtmp(measnum)=min(find(abs(squeeze(Curvefitavg(:,measnum))-0.3)==min(abs(squeeze(Curvefitavg(:,measnum))-0.3))));%Use min in case size(ind)>1
            errorfitavg(:,measnum)=(g1avg(:,measnum)-squeeze(Curvefitavg(:,measnum)))./squeeze(Curvefitavg(:,measnum))*100;
            meanerroravg(measnum)=mean(errorfitavg(1:indtmp(measnum),measnum));
            stderroravg(measnum)=std(errorfitavg(1:indtmp(measnum),measnum));
            
%             try
                x0 = [Dbfitavg(measnum) Dbfitavg(measnum)];
                thickness = 0.5;   
                % From Dehaes, 2014 2-layer fitting of absolute optical
                % properties in adult head + modeling using spherical
                % representation of greens' function
                phi0 = fminsearchbnd(@(phi)(abs(phi/(sin(phi/2))- (DPF(3)*2/r))),[pi/2],[0],[2*pi],options);
                theta0 = fminsearchbnd(@(theta)(abs(DPF(3)/phi0*(cos(theta/2)-cos(phi0/2))-thickness)),[pi/2],[0],[pi],options);
                muaC_ratio = ((phi0-theta0)/phi0)^3;
                muspC_ratio = (phi0-theta0)/phi0;
                muaC_scalar = 2;
                muspC_scalar = 0.5;
                muaEC_scalar = (1-muaC_scalar*muaC_ratio)/(1-muaC_ratio);
                muspEC_scalar = (1-muspC_scalar*muspC_ratio)/(1-muspC_ratio);
                mua2layer(measnum,:) = mua(measnum).*[muaEC_scalar muaC_scalar];
                musp2layer = muspo.*[muspEC_scalar muspC_scalar];
                measnum
                [Dbfit_2layer(measnum,:),fval_2layer(measnum,i),exitflag_2layer(measnum,i)]=fminsearchbnd(@(x)xg1fit2layerlog(x,n0,zd,mua2layer(measnum,:),musp2layer,lambda*10^7,thickness,r,taustmp(1:datalength),g1tmp(1:datalength,measnum)),x0,[0 0],[],options);
                %xg1fit2layer_betaandDB_withsigma(x0,n0,R,mua,musp,lambda,ell,rho,taustmp,g2,sigma)
               
                Curvefit2layeravg(:,measnum)=g1fit2layer(Dbfit_2layer(measnum,:),n0,zd,mua2layer(measnum,:),musp2layer,lambda*10^7,thickness,r,taus);
                hold off
                semilogx(taus(1:datalength),g1avg(1:datalength,measnum))
                hold on; axis tight;
                semilogx(taus(1:datalength),Curvefitavg(1:datalength,measnum),'black')
                semilogx(taus(1:datalength),Curvefit2layeravg(1:datalength,measnum),'red')
                %Calculate error in fit
                ind2layertmp(measnum)=min(find(abs(squeeze(Curvefit2layeravg(:,measnum))-0.3)==min(abs(squeeze(Curvefit2layeravg(:,measnum))-0.3))));%Use min in case size(ind)>1
                errorfit2layeravg(:,measnum)=(g1avg(1:length(taus),measnum)-squeeze(Curvefit2layeravg(:,measnum)))./squeeze(Curvefit2layeravg(:,measnum))*100;
                meanerror2layeravg(measnum)=mean(errorfitavg(1:indtmp(measnum),measnum));
                stderror2layeravg(measnum)=std(errorfitavg(1:indtmp(measnum),measnum));
%             catch E
%                 Dbfit_2layer(measnum,i,:)=NaN;
%                 fval_2layer(measnum,i)=NaN;
%                 exitflag_2layer(measnum,i)=NaN;
%                 Curvefit2layeravg(:,measnum)=NaN;
%                 ind2layertmp(measnum)=NaN;
%                 errorfit2layeravg(:,measnum)=NaN;
%                 meanerror2layeravg(measnum)=NaN;
%                 stderror2layeravg(measnum)=NaN;              
%                 ['2-layer fit errored: ' num2str(measnum)]
%             end
        else
            indtmp(measnum)=NaN;
            errorfitavg(:,measnum)=ones(1,length(taus)).*NaN;
            meanerroravg(measnum)=NaN;
            stderroravg(measnum)=NaN;
            Betasaveavg(measnum)=NaN;
            Dbfitavg(measnum)=NaN;
            fvalavg(measnum)=NaN;
            exitflagavg(measnum)=NaN;
            g1avg(:,measnum)=ones(1,length(taus)).*NaN;
            Curvefitavg(:,measnum)=ones(1,length(taus)).*NaN;
            Curvefitg2avg(:,measnum)=ones(1,length(taus)).*NaN;
        end

    else
        %Fit data from each detector
        for d=1:length(usedflowdets)
            i=usedflowdets(d);
            if isempty(find(isnan(corrs(measnum,:,i)))) & ~isnan(mua(measnum))
                corrsmean=nanmean(corrs(measnum:measnum+numframestoavg,:,i),1);
                foo=min(find(slidingavg(corrsmean,avgnum)<=cutoff));
                if isempty(foo) || foo<startcorr
                    tmpf(i)=datalength;
                else
                    tmpf(i)=min(find(slidingavg(corrsmean,avgnum)<=cutoff));
                end
                corrstmp=squeeze(corrsmean(startcorr:tmpf(i)));
                corrstmp=slidingavg(corrstmp,avgnum);
                taustmp=taus(startcorr:tmpf(i));
                %Calculate noise from Chao's noise model
                sigma(:,i)=1./intensitydata(measnum,i).*sqrt(1./T./t).*sqrt(1+mean(setbeta).*exp(-gamma*taus));

                if fitbeta==0
                    %Dont fit beta, bound Db fit to reasonable values
                    Betasave(measnum,i)=mean(setbeta);
                    [Dbfit(measnum,i),fval(measnum,i),exitflag(measnum,i)]=fminsearchbnd(@xg2fitx_new1_withsigma,x0(1),[0],[1e-2],options,...
                        Betasave(measnum,i),r,taustmp,muspo,mua(measnum),k0,ze,corrstmp,length(taustmp),sigma(:,i));
                else
                    %Fit both Beta and BFI at the same time, bound Beta fit to
                    %reasonable values
                    [betaDbfit(:,measnum,i),fval(measnum,i),exitflag(measnum,i)]=fminsearchbnd(@xg2fitx_betaandDB_new1_withsigma,x0,...
                        [0 betafitmin],[1e-1 betafitmax],options,r,taustmp,muspo,mua(measnum),k0,ze,corrstmp,length(corrstmp),sigma(:,i));
                    Betasave(measnum,i)=squeeze(betaDbfit(2,measnum,i));
                    Dbfit(measnum,i)=squeeze(betaDbfit(1,measnum,i));
                end
                g1(:,i,measnum)=sqrt(abs((corrs(measnum:measnum+numframestoavg,:,i)-1)./Betasave(measnum,i)));
                Curvefit(:,measnum,i)=g1fitx(Dbfit(measnum,i),r,taus,muspo,mua(measnum),k0,ze);
                Curvefitg2(:,measnum,i)=g2fitx([Dbfit(measnum,i) Betasave(measnum,i)],r,taus,muspo,mua(measnum),k0,ze);
                %Calculate error in fit
                indtmp(measnum,i)=min(find(abs(squeeze(Curvefit(:,measnum,i))-0.3)==min(abs(squeeze(Curvefit(:,measnum,i))-0.3))));%Use min in case size(ind)>1
                errorfit(:,measnum,i)=(g1(:,i,measnum)-squeeze(Curvefit(:,measnum,i)))./squeeze(Curvefit(:,measnum,i))*100;
                meanerror(measnum,i)=mean(errorfit(1:indtmp(measnum,i),measnum,i));
                stderror(measnum,i)=std(errorfit(1:indtmp(measnum,i),measnum,i));
            else
                indtmp(measnum,i)=NaN;
                errorfit(:,measnum,i)=ones(1,length(taus)).*NaN;
                meanerror(measnum,i)=NaN;
                stderror(measnum,i)=NaN;
                g1(:,i,measnum)=ones(1,length(taus)).*NaN;
                Curvefit(:,measnum,i)=ones(1,length(taus)).*NaN;
                Curvefitg2(:,measnum,i)=ones(1,length(taus)).*NaN;
                Betasave(measnum,i)=NaN;
                Dbfit(measnum,i)=NaN;
            end

        end

    end
end